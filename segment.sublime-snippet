<snippet>
	<content><![CDATA[
struct segment {
	vector<int>st, lazy;
	int n;
	void init(int nn) {
		n = nn;
		st.clear(); st.resize(4 * n, 0);
	}
	void build(int *a, int s, int e, int index) {
		if (s > e)return ;

		if (s == e) {
			st[index] = a[s];
			return ;
		}
		int mid = (s + e) / 2;
		build(a, s, mid, 2 * index + 1);
		build(a, mid + 1, e, 2 * index + 2);
		st[index] = max(st[2 * index + 1] , st[2 * index + 2]);
		return ;
	}
	int query(int s, int e, int qs, int qe, int index) {
		if (s > qe or e < qs)
			return 0;
		if (s >= qs and e <= qe)
			return st[index];
		int mid = (s + e) / 2;
		int q1 = query(s, mid, qs, qe, 2 * index + 1);
		int q2 = query(mid + 1, e, qs, qe, 2 * index + 2);
		return max(q1 , q2);
	}
	void update(int s, int e, int qs, int qe, int index, int val) {
		if (s > e or qe < s or e < qs) {
			return ;
		}
		if (s >= qs and e <= qe) {
			st[index] +=  val;
			return ;
		}
		int mid = (s + e) / 2;
		update(s, mid, qs, qe, 2 * index + 1,  val);
		update(mid + 1, e, qs, qe, 2 * index + 2,  val);
		st[index] = max(st[2 * index + 1] , st[2 * index + 2]);
		return;
	}
	void build(int *a) {
		build(a, 0, n - 1, 0);
	}
	int query(int l, int r) {
		return query(0, n - 1, l, r, 0);
	}
	void update(int qs, int qe, int ele) {
		update(0, n - 1, qs, qe, 0, ele);
	}
} tree;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
